diff --git a/dist/lib/eslint/runLintCheck.js b/dist/lib/eslint/runLintCheck.js
index 080bd27878721805f16d104255ba4a8b1a9a1410..c882864dc173d6d4644edee9a45b96bfe23579e7 100644
--- a/dist/lib/eslint/runLintCheck.js
+++ b/dist/lib/eslint/runLintCheck.js
@@ -122,24 +122,43 @@ async function lint(baseDir, lintDirs, eslintrcFile, pkgJsonPath, { lintDuringBu
             _log.error(`ESLint must be installed${lintDuringBuild ? " in order to run during builds:" : ":"} ${(0, _picocolors.bold)((0, _picocolors.cyan)((packageManager === "yarn" ? "yarn add --dev" : packageManager === "pnpm" ? "pnpm install --save-dev" : "npm install --save-dev") + " eslint"))}`);
             return null;
         }
-        const mod = await Promise.resolve(require(deps.resolved.get("eslint")));
-        const { ESLint } = mod;
+        const modPath = deps.resolved.get('eslint')
+        const unsupportedApiPath = _path.default.resolve(
+            _path.default.dirname(modPath),
+            './unsupported-api.js'
+        )
+
+        const mod = await Promise.resolve(require(modPath))
+        const unsupportedApi = await new Promise((resolve) => {
+            try {
+                resolve(require(unsupportedApiPath))
+            } catch (err) {
+                resolve(null)
+            }
+        })
+
+        let { ESLint } = mod
+        let shouldUseFlatConfig = false
+        if (unsupportedApi) {
+            shouldUseFlatConfig = await unsupportedApi.shouldUseFlatConfig?.()
+            if (shouldUseFlatConfig) {
+                ESLint = unsupportedApi.FlatESLint
+            }
+        }
+
         let eslintVersion = (ESLint == null ? void 0 : ESLint.version) ?? ((_mod_CLIEngine = mod.CLIEngine) == null ? void 0 : _mod_CLIEngine.version);
         if (!eslintVersion || _semver.default.lt(eslintVersion, "7.0.0")) {
             return `${(0, _picocolors.red)("error")} - Your project has an older version of ESLint installed${eslintVersion ? " (" + eslintVersion + ")" : ""}. Please upgrade to ESLint version 7 or above`;
         }
         let options = {
-            useEslintrc: true,
             baseConfig: {},
-            errorOnUnmatchedPattern: false,
-            extensions: [
-                ".js",
-                ".jsx",
-                ".ts",
-                ".tsx"
-            ],
-            cache: true,
-            ...eslintOptions
+            ...(!shouldUseFlatConfig ? {
+                useEslintrc: true,
+                errorOnUnmatchedPattern: false,
+                extensions: ['.js', '.jsx', '.ts', '.tsx'],
+                cache: true,
+                ...eslintOptions,
+            } : {})
         };
         let eslint = new ESLint(options);
         let nextEslintPluginIsEnabled = false;
@@ -149,7 +168,7 @@ async function lint(baseDir, lintDirs, eslintrcFile, pkgJsonPath, { lintDuringBu
             pkgJsonPath
         ]){
             var _completeConfig_plugins;
-            if (!configFile) continue;
+            if (!configFile || shouldUseFlatConfig) continue;
             const completeConfig = await eslint.calculateConfigForFile(configFile);
             if ((_completeConfig_plugins = completeConfig.plugins) == null ? void 0 : _completeConfig_plugins.includes("@next/next")) {
                 nextEslintPluginIsEnabled = true;
@@ -189,8 +208,10 @@ async function lint(baseDir, lintDirs, eslintrcFile, pkgJsonPath, { lintDuringBu
                 eslint = new ESLint(options);
             }
         } else {
-            _log.warn("");
-            _log.warn("The Next.js plugin was not detected in your ESLint configuration. See https://nextjs.org/docs/basic-features/eslint#migrating-existing-config");
+            if (!shouldUseFlatConfig) {
+                _log.warn("");
+                _log.warn("The Next.js plugin was not detected in your ESLint configuration. See https://nextjs.org/docs/basic-features/eslint#migrating-existing-config");
+            }
         }
         const lintStart = process.hrtime();
         let results = await eslint.lintFiles(lintDirs);
@@ -237,7 +258,8 @@ async function runLintCheck(baseDir, lintDirs, opts) {
             ".eslintrc.yaml",
             ".eslintrc.yml",
             ".eslintrc.json",
-            ".eslintrc"
+            ".eslintrc",
+            "eslint.config.js"
         ], {
             cwd: baseDir
         }) ?? null;
